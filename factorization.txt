NULL;
with(Groebner);
NULL;
mysubs := proc(n, S, X, f) local i, f1, m; f1 := f; for i to n do f1 := eval(f1, X[i] = X[i]*y^S[i]); end do; m := [TrailingTerm(f1, plex(y))][2]; return expand(f1/m); end proc;
myeval := proc(n, P) local i, X; X := []; for i to n do X := [op(X), x[i] = P[i]]; end do; return X; end proc;
MinDeg := proc(fp, p) local u, i, E, Bup, Bdown, k, j; u := fp; if modp(u, p) <> 0 then return [0, u]; end if; E := [p]; for i while modp(u, E[i]) = 0 do E := [op(E), E[i]*E[i]]; end do; Bup := 2^(i - 1); Bdown := 2^(i - 2); k := i - 1; for i while 1 < Bup - Bdown do u := u/E[k]; if modp(u, p) <> 0 then return [Bdown, u]; end if; for j while modp(u, E[j]) = 0 do ; end do; Bup := Bdown + 2^(j - 1); Bdown := Bdown + 2^(j - 2); k := j - 1; end do; return [Bdown, u/p]; end proc;
myCoefBound := proc(f) local i, A, C; A := [coeffs(f)]; C := 0; for i to nops(A) do if C < abs(A[i]) then C := abs(A[i]); end if; end do; return C + 1; end proc;
MonCont := proc(f, X, n) local i, C, M; M := content(f, X, 'g'); for i to n do M := M*content(g, subsop(i = NULL, X), 'g'); end do; return [M, g]; end proc;
mycheck := proc(f, g, n) local i, Q, F, m, G; Q := []; for i to n do Q := [op(Q), x[i] = RandomTools[Generate](integer(range = 1 .. 1000000))]; end do; F := eval(f, Q); m := nops(g); G := 1; for i to m do G := G*eval(g[i, 1], Q)^g[i, 2]; end do; if F = G or F = -G then return 1; else return 0; end if; end proc;
myFindPolynomial := proc(n, f, X, S, P) local A, g, i, B, Tem, K; A := [coeffs(f)]; if nops(A) = 1 then return failure; end if; B := [op(f)]; Tem := myFindTerm(n, A[1], P, X, S); K := Tem[2] - degree(B[1], y); g := Tem[1]; for i from 2 to nops(A) do Tem := myFindTerm(n, A[i], P, X, S); if Tem[2] - degree(B[i], y) <> K then return failure; end if; g := g + Tem[1]; end do; return g; end proc;
myFindTerm := proc(n, N, P, X, S) local i, N1, K, d, M, Q; N1 := N; for i to n do K := MinDeg(N1, P[i]); d[i] := K[1]; N1 := K[2]; end do; M := 1; Q := 0; for i to n do M := M*X[i]^d[i]; Q := Q + d[i]*S[i]; end do; M := M*N1; return [M, Q]; end proc;
myFactor := proc(f1) local i, M, M1, X, P, f, GT, S, fy, P1, F, Myterm, m, g, n, f3, flag, C, N, N1; X := [op(indets(f1))]; n := nops(X); M1 := MonCont(f1, X, n); M := M1[1]; f := M1[2]; C := myCoefBound(f); flag := 0; GT := 1; while flag <> 1 do S := []; for i to n - 1 do S := [op(S), RandomTools[Generate](integer(range = 0 .. GT))]; end do; if add(S[i], i = 1 .. n - 1) = 0 then S := [op(S), RandomTools[Generate](integer(range = 1 .. GT))]; else S := [op(S), RandomTools[Generate](integer(range = 0 .. GT))]; end if; fy := mysubs(n, S, X, f); N := 10*floor(GT^2*log2(C)); N1 := RandomTools[Generate](integer(range = N .. 2*N)); P := [nextprime(N1)]; for i to n - 1 do P := [op(P), nextprime(P[i])]; end do; P1 := myeval(n, P); F := eval(fy, P1); Myterm := factors(F)[2]; m := nops(Myterm); g := [[M, 1]]; for i to m do content(Myterm[i, 1], y, 'f2'); f3 := myFindPolynomial(n, f2, X, S, P); g := [op(g), [f3, Myterm[i, 2]]]; end do; if mycheck(f1, g, n) = 1 then return g; else GT := 2*GT; end if; end do; end proc;
